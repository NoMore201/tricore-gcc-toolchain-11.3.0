From dbf17bb7c3eb5b4ec051e18425f30a050c3f714f Mon Sep 17 00:00:00 2001
From: Domenico Iezzi <domenico@iezzi.info>
Date: Wed, 8 May 2024 09:36:51 +0200
Subject: [PATCH] Fix build errors on recent mingw-w64 headers

This fix is based on this commit [1], with details available in
discussions [2], [3]. It fixes build on recent version of packages in
MSYS2.

[1] https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=902c755930326cb4405672aa3ea13c35c653cbff
[2] https://github.com/msys2/MINGW-packages/issues/19036#issuecomment-1797951754
[3] https://gcc.gnu.org/pipermail/gcc-patches/2023-January/609514.html
---
 gcc/ada/adaint.c                                                | 1 +
 gcc/ada/cio.c                                                   | 1 +
 gcc/ada/ctrl_c.c                                                | 1 +
 gcc/ada/expect.c                                                | 1 +
 gcc/ada/gsocket.h                                               | 1 +
 gcc/ada/mingw32.h                                               | 1 +
 gcc/ada/mkdir.c                                                 | 1 +
 gcc/ada/rtfinal.c                                               | 1 +
 gcc/ada/rtinit.c                                                | 1 +
 gcc/ada/seh_init.c                                              | 1 +
 gcc/ada/sysdep.c                                                | 2 ++
 gcc/ada/terminals.c                                             | 1 +
 gcc/ada/tracebak.c                                              | 2 ++
 gcc/d/dmd/root/file.c                                           | 1 +
 gcc/d/dmd/root/filename.c                                       | 1 +
 gcc/diagnostic-color.c                                          | 1 +
 gcc/jit/jit-w32.h                                               | 1 +
 gcc/plugin.c                                                    | 1 +
 gcc/prefix.c                                                    | 1 +
 gcc/testsuite/g++.dg/asan/sanitizer_test_utils.h                | 1 +
 gcc/testsuite/gcc.dg/di-sync-multithread.c                      | 1 +
 gcc/testsuite/gcc.dg/format/ms-format3.c                        | 1 +
 .../objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h          | 2 ++
 libgcc/config/i386/enable-execute-stack-mingw32.c               | 1 +
 libgcc/config/i386/gthr-win32.c                                 | 1 +
 libgcc/config/i386/gthr-win32.h                                 | 2 ++
 libgcc/config/i386/w32-unwind.h                                 | 2 +-
 libgcc/libgcc2.c                                                | 1 +
 libgcc/unwind-generic.h                                         | 1 +
 29 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/gcc/ada/adaint.c b/gcc/ada/adaint.c
index 2e54e69643a..0ff831e368b 100644
--- a/gcc/ada/adaint.c
+++ b/gcc/ada/adaint.c
@@ -230,6 +230,7 @@ UINT __gnat_current_ccs_encoding;
 
 #elif defined (_WIN32)
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <accctrl.h>
 #include <aclapi.h>
diff --git a/gcc/ada/cio.c b/gcc/ada/cio.c
index 2a9fe1a6c24..4b3420ba3b6 100644
--- a/gcc/ada/cio.c
+++ b/gcc/ada/cio.c
@@ -67,6 +67,7 @@ extern "C" {
 #endif
 
 #ifdef RTX
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <Rtapi.h>
 #endif
diff --git a/gcc/ada/ctrl_c.c b/gcc/ada/ctrl_c.c
index 72d6a5bb46c..617d135310e 100644
--- a/gcc/ada/ctrl_c.c
+++ b/gcc/ada/ctrl_c.c
@@ -127,6 +127,7 @@ __gnat_uninstall_int_handler (void)
 #elif defined (__MINGW32__)
 
 #include "mingw32.h"
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 void (*sigint_intercepted) (void) = NULL;
diff --git a/gcc/ada/expect.c b/gcc/ada/expect.c
index 30c5b8e6368..72dc48ee27e 100644
--- a/gcc/ada/expect.c
+++ b/gcc/ada/expect.c
@@ -75,6 +75,7 @@
 
 #ifdef _WIN32
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <process.h>
 #include <signal.h>
diff --git a/gcc/ada/gsocket.h b/gcc/ada/gsocket.h
index ba51fb1e7cc..e0c6f783052 100644
--- a/gcc/ada/gsocket.h
+++ b/gcc/ada/gsocket.h
@@ -173,6 +173,7 @@
 
 #endif
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 #elif defined(VMS)
diff --git a/gcc/ada/mingw32.h b/gcc/ada/mingw32.h
index c902d04fdb8..71a07798e41 100644
--- a/gcc/ada/mingw32.h
+++ b/gcc/ada/mingw32.h
@@ -58,6 +58,7 @@
 #define _X86INTRIN_H_INCLUDED
 #define _EMMINTRIN_H_INCLUDED
 #endif
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 /* After including this file it is possible to use the character t as prefix
diff --git a/gcc/ada/mkdir.c b/gcc/ada/mkdir.c
index a11b1e5fa2a..f35f46e420b 100644
--- a/gcc/ada/mkdir.c
+++ b/gcc/ada/mkdir.c
@@ -44,6 +44,7 @@
 
 #ifdef __MINGW32__
 #include "mingw32.h"
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #ifdef MAXPATHLEN
 #define GNAT_MAX_PATH_LEN MAXPATHLEN
diff --git a/gcc/ada/rtfinal.c b/gcc/ada/rtfinal.c
index 92f3e8909a1..df9b4014d8f 100644
--- a/gcc/ada/rtfinal.c
+++ b/gcc/ada/rtfinal.c
@@ -47,6 +47,7 @@ extern int __gnat_rt_init_count;
 
 #if defined (__MINGW32__)
 #include "mingw32.h"
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 extern CRITICAL_SECTION ProcListCS;
diff --git a/gcc/ada/rtinit.c b/gcc/ada/rtinit.c
index 1bb3cb08a48..501a2d88bc8 100644
--- a/gcc/ada/rtinit.c
+++ b/gcc/ada/rtinit.c
@@ -71,6 +71,7 @@ int __gnat_rt_init_count = 0;
 
 #if defined (__MINGW32__)
 #include "mingw32.h"
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 extern void __gnat_init_float (void);
diff --git a/gcc/ada/seh_init.c b/gcc/ada/seh_init.c
index 27e6379decd..974dd6bd060 100644
--- a/gcc/ada/seh_init.c
+++ b/gcc/ada/seh_init.c
@@ -34,6 +34,7 @@
 
 #if defined (_WIN32) || (defined (__CYGWIN__) && defined (__SEH__))
 /* Include system headers, before system.h poisons malloc.  */
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <excpt.h>
 #endif
diff --git a/gcc/ada/sysdep.c b/gcc/ada/sysdep.c
index 51ffbd5545e..79c3e82c724 100644
--- a/gcc/ada/sysdep.c
+++ b/gcc/ada/sysdep.c
@@ -217,6 +217,7 @@ __gnat_ttyname (int filedes)
 #endif /* __CYGWIN__ */
 
 #if defined (__CYGWIN__) || defined (__MINGW32__)
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 int __gnat_is_windows_xp (void);
@@ -593,6 +594,7 @@ getc_immediate_common (FILE *stream,
    Ada programs.  */
 
 #ifdef WINNT
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 /* Provide functions to echo the values passed to WinMain (windows bindings
diff --git a/gcc/ada/terminals.c b/gcc/ada/terminals.c
index ec9db3a6a4c..5a8a48e8bbc 100644
--- a/gcc/ada/terminals.c
+++ b/gcc/ada/terminals.c
@@ -151,6 +151,7 @@ __gnat_setup_winsize (void *desc ATTRIBUTE_UNUSED,
 #include <stdio.h>
 #include <stdlib.h>
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <winternl.h>
 #include <io.h>
diff --git a/gcc/ada/tracebak.c b/gcc/ada/tracebak.c
index 23ed8da241f..5aed8f226a9 100644
--- a/gcc/ada/tracebak.c
+++ b/gcc/ada/tracebak.c
@@ -93,6 +93,7 @@ extern void (*Unlock_Task) (void);
 
 #if defined (_WIN64) && defined (__SEH__)
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 #define IS_BAD_PTR(ptr) (IsBadCodePtr((FARPROC)ptr))
@@ -447,6 +448,7 @@ struct layout
 #elif defined (__i386__) || defined (__x86_64__)
 
 #if defined (__WIN32)
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #define IS_BAD_PTR(ptr) (IsBadCodePtr((FARPROC)ptr))
 #elif defined (__sun__)
diff --git a/gcc/d/dmd/root/file.c b/gcc/d/dmd/root/file.c
index 314b5b512c8..9aeb48f4e1f 100644
--- a/gcc/d/dmd/root/file.c
+++ b/gcc/d/dmd/root/file.c
@@ -10,6 +10,7 @@
 #include "file.h"
 
 #if _WIN32
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
 
diff --git a/gcc/d/dmd/root/filename.c b/gcc/d/dmd/root/filename.c
index 0c5138b6ddf..3bf5e843786 100644
--- a/gcc/d/dmd/root/filename.c
+++ b/gcc/d/dmd/root/filename.c
@@ -15,6 +15,7 @@
 #include "rmem.h"
 
 #if _WIN32
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
 
diff --git a/gcc/diagnostic-color.c b/gcc/diagnostic-color.c
index 1fc5a9079c7..fe72f75f269 100644
--- a/gcc/diagnostic-color.c
+++ b/gcc/diagnostic-color.c
@@ -22,6 +22,7 @@
 #include "diagnostic-url.h"
 
 #ifdef __MINGW32__
+#  define WIN32_LEAN_AND_MEAN
 #  include <windows.h>
 #endif
 
diff --git a/gcc/jit/jit-w32.h b/gcc/jit/jit-w32.h
index b7b77d0e6a5..ba21728acfe 100644
--- a/gcc/jit/jit-w32.h
+++ b/gcc/jit/jit-w32.h
@@ -20,6 +20,7 @@ along with GCC; see the file COPYING3.  If not see
 
 #include "config.h"
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 namespace gcc {
diff --git a/gcc/plugin.c b/gcc/plugin.c
index d47fa512ac1..b3325adcdb0 100644
--- a/gcc/plugin.c
+++ b/gcc/plugin.c
@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see
 #ifndef NOMINMAX
 #define NOMINMAX
 #endif
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
 
diff --git a/gcc/prefix.c b/gcc/prefix.c
index 747c09de638..b23d17db526 100644
--- a/gcc/prefix.c
+++ b/gcc/prefix.c
@@ -67,6 +67,7 @@ License along with GCC; see the file COPYING3.  If not see
 #include "system.h"
 #include "coretypes.h"
 #if defined(_WIN32) && defined(ENABLE_WIN32_REGISTRY)
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
 #include "prefix.h"
diff --git a/gcc/testsuite/g++.dg/asan/sanitizer_test_utils.h b/gcc/testsuite/g++.dg/asan/sanitizer_test_utils.h
index b118de1d346..ba5f30906ee 100644
--- a/gcc/testsuite/g++.dg/asan/sanitizer_test_utils.h
+++ b/gcc/testsuite/g++.dg/asan/sanitizer_test_utils.h
@@ -15,6 +15,7 @@
 
 #if defined(_WIN32)
 // <windows.h> should always be the first include on Windows.
+#define WIN32_LEAN_AND_MEAN
 # include <windows.h>
 // MSVS headers define max/min as macros, so std::max/min gets crazy.
 # undef max
diff --git a/gcc/testsuite/gcc.dg/di-sync-multithread.c b/gcc/testsuite/gcc.dg/di-sync-multithread.c
index 493f1e27201..9cf347d38d3 100644
--- a/gcc/testsuite/gcc.dg/di-sync-multithread.c
+++ b/gcc/testsuite/gcc.dg/di-sync-multithread.c
@@ -11,6 +11,7 @@
 #include <pthread.h>
 #include <unistd.h>
 #ifdef _WIN32
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
 
diff --git a/gcc/testsuite/gcc.dg/format/ms-format3.c b/gcc/testsuite/gcc.dg/format/ms-format3.c
index 806ddb60b65..07f4d450399 100644
--- a/gcc/testsuite/gcc.dg/format/ms-format3.c
+++ b/gcc/testsuite/gcc.dg/format/ms-format3.c
@@ -8,6 +8,7 @@
 #define USE_SYSTEM_FORMATS
 #define WIN32_LEAN_AND_MEAN
 #include "format.h"
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 void foo (LONG_PTR l, ULONG_PTR u, DWORD_PTR d, UINT_PTR p, SIZE_T s)
diff --git a/gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h b/gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h
index a0e7cc7a409..218e08b8f2d 100644
--- a/gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h
+++ b/gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h
@@ -309,8 +309,10 @@ typedef	struct {
 
 #if defined(__WIN64__)
 #include <winsock2.h>
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #else
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <winsock2.h>
 #endif
diff --git a/libgcc/config/i386/enable-execute-stack-mingw32.c b/libgcc/config/i386/enable-execute-stack-mingw32.c
index 8aebad88994..e4157d47c13 100644
--- a/libgcc/config/i386/enable-execute-stack-mingw32.c
+++ b/libgcc/config/i386/enable-execute-stack-mingw32.c
@@ -22,6 +22,7 @@
    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    <http://www.gnu.org/licenses/>.  */
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 extern void __enable_execute_stack (void *);
diff --git a/libgcc/config/i386/gthr-win32.c b/libgcc/config/i386/gthr-win32.c
index 117055f92f0..a8a26066d27 100644
--- a/libgcc/config/i386/gthr-win32.c
+++ b/libgcc/config/i386/gthr-win32.c
@@ -27,6 +27,7 @@ a copy of the GCC Runtime Library Exception along with this program;
 see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 <http://www.gnu.org/licenses/>.  */
 
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #ifndef __GTHREAD_HIDE_WIN32API
 # define __GTHREAD_HIDE_WIN32API 1
diff --git a/libgcc/config/i386/gthr-win32.h b/libgcc/config/i386/gthr-win32.h
index 7b84392f6cf..4c12729f0a7 100644
--- a/libgcc/config/i386/gthr-win32.h
+++ b/libgcc/config/i386/gthr-win32.h
@@ -82,6 +82,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 #ifndef __OBJC__
 #define __OBJC__
 #endif
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 /* Now undef the windows BOOL.  */
 #undef BOOL
@@ -546,6 +547,7 @@ __gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
 #else /* ! __GTHREAD_HIDE_WIN32API */
 
 #define NOGDI
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <errno.h>
 
diff --git a/libgcc/config/i386/w32-unwind.h b/libgcc/config/i386/w32-unwind.h
index 0e053c78d80..5d304d2d12f 100644
--- a/libgcc/config/i386/w32-unwind.h
+++ b/libgcc/config/i386/w32-unwind.h
@@ -83,7 +83,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 
 #ifndef __MINGW64__
 
-#define WIN32_MEAN_AND_LEAN
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 /* Patterns found experimentally to be on a Windows signal handler  */
 
diff --git a/libgcc/libgcc2.c b/libgcc/libgcc2.c
index 17de0a7e246..f6403fff8b5 100644
--- a/libgcc/libgcc2.c
+++ b/libgcc/libgcc2.c
@@ -2138,6 +2138,7 @@ __clear_cache (void *beg __attribute__((__unused__)),
 /* Jump to a trampoline, loading the static chain address.  */
 
 #if defined(WINNT) && ! defined(__CYGWIN__)
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 int getpagesize (void);
 int mprotect (char *,int, int);
diff --git a/libgcc/unwind-generic.h b/libgcc/unwind-generic.h
index 4edc14c7987..a92b5417237 100644
--- a/libgcc/unwind-generic.h
+++ b/libgcc/unwind-generic.h
@@ -30,6 +30,7 @@
 
 #if defined (__SEH__) && !defined (__USING_SJLJ_EXCEPTIONS__)
 /* Only for _GCC_specific_handler.  */
+#define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
 
-- 
2.39.2

